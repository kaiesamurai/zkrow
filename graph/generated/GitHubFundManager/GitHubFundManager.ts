// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CalculationRequested extends ethereum.Event {
  get params(): CalculationRequested__Params {
    return new CalculationRequested__Params(this);
  }
}

export class CalculationRequested__Params {
  _event: CalculationRequested;

  constructor(event: CalculationRequested) {
    this._event = event;
  }

  get fundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ipfsHash(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ChainLinkFunctionFailed extends ethereum.Event {
  get params(): ChainLinkFunctionFailed__Params {
    return new ChainLinkFunctionFailed__Params(this);
  }
}

export class ChainLinkFunctionFailed__Params {
  _event: ChainLinkFunctionFailed;

  constructor(event: ChainLinkFunctionFailed) {
    this._event = event;
  }

  get fundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get error(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class FundDistributed extends ethereum.Event {
  get params(): FundDistributed__Params {
    return new FundDistributed__Params(this);
  }
}

export class FundDistributed__Params {
  _event: FundDistributed;

  constructor(event: FundDistributed) {
    this._event = event;
  }

  get fundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get logins(): Array<string> {
    return this._event.parameters[1].value.toStringArray();
  }

  get shares(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class Funded extends ethereum.Event {
  get params(): Funded__Params {
    return new Funded__Params(this);
  }
}

export class Funded__Params {
  _event: Funded;

  constructor(event: Funded) {
    this._event = event;
  }

  get fundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get orgAndName(): string {
    return this._event.parameters[1].value.toString();
  }

  get funder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class GitHubPassRegistered extends ethereum.Event {
  get params(): GitHubPassRegistered__Params {
    return new GitHubPassRegistered__Params(this);
  }
}

export class GitHubPassRegistered__Params {
  _event: GitHubPassRegistered;

  constructor(event: GitHubPassRegistered) {
    this._event = event;
  }

  get login(): string {
    return this._event.parameters[0].value.toString();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestFulfilled extends ethereum.Event {
  get params(): RequestFulfilled__Params {
    return new RequestFulfilled__Params(this);
  }
}

export class RequestFulfilled__Params {
  _event: RequestFulfilled;

  constructor(event: RequestFulfilled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RequestSent extends ethereum.Event {
  get params(): RequestSent__Params {
    return new RequestSent__Params(this);
  }
}

export class RequestSent__Params {
  _event: RequestSent;

  constructor(event: RequestSent) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ShareWithdrwan extends ethereum.Event {
  get params(): ShareWithdrwan__Params {
    return new ShareWithdrwan__Params(this);
  }
}

export class ShareWithdrwan__Params {
  _event: ShareWithdrwan;

  constructor(event: ShareWithdrwan) {
    this._event = event;
  }

  get fundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class GitHubFundManager__splitSignatureResult {
  value0: Bytes;
  value1: Bytes;
  value2: i32;

  constructor(value0: Bytes, value1: Bytes, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    return map;
  }

  getR(): Bytes {
    return this.value0;
  }

  getS(): Bytes {
    return this.value1;
  }

  getV(): i32 {
    return this.value2;
  }
}

export class GitHubFundManager extends ethereum.SmartContract {
  static bind(address: Address): GitHubFundManager {
    return new GitHubFundManager("GitHubFundManager", address);
  }

  RISC0_IMAGE_ID(): Bytes {
    let result = super.call("RISC0_IMAGE_ID", "RISC0_IMAGE_ID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RISC0_IMAGE_ID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RISC0_IMAGE_ID",
      "RISC0_IMAGE_ID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getIpfsHash(fundId: BigInt): string {
    let result = super.call("getIpfsHash", "getIpfsHash(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(fundId),
    ]);

    return result[0].toString();
  }

  try_getIpfsHash(fundId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getIpfsHash", "getIpfsHash(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(fundId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  hasGitHubPass(githubLogin: string): boolean {
    let result = super.call("hasGitHubPass", "hasGitHubPass(string):(bool)", [
      ethereum.Value.fromString(githubLogin),
    ]);

    return result[0].toBoolean();
  }

  try_hasGitHubPass(githubLogin: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasGitHubPass",
      "hasGitHubPass(string):(bool)",
      [ethereum.Value.fromString(githubLogin)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDistributed(fundId: BigInt): boolean {
    let result = super.call("isDistributed", "isDistributed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(fundId),
    ]);

    return result[0].toBoolean();
  }

  try_isDistributed(fundId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDistributed",
      "isDistributed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(fundId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  recoverSigner(digest: Bytes, signature: Bytes): Address {
    let result = super.call(
      "recoverSigner",
      "recoverSigner(bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(digest),
        ethereum.Value.fromBytes(signature),
      ],
    );

    return result[0].toAddress();
  }

  try_recoverSigner(
    digest: Bytes,
    signature: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "recoverSigner",
      "recoverSigner(bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(digest),
        ethereum.Value.fromBytes(signature),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  risc0Verifier(): Address {
    let result = super.call("risc0Verifier", "risc0Verifier():(address)", []);

    return result[0].toAddress();
  }

  try_risc0Verifier(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "risc0Verifier",
      "risc0Verifier():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  splitSignature(sig: Bytes): GitHubFundManager__splitSignatureResult {
    let result = super.call(
      "splitSignature",
      "splitSignature(bytes):(bytes32,bytes32,uint8)",
      [ethereum.Value.fromBytes(sig)],
    );

    return new GitHubFundManager__splitSignatureResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toI32(),
    );
  }

  try_splitSignature(
    sig: Bytes,
  ): ethereum.CallResult<GitHubFundManager__splitSignatureResult> {
    let result = super.tryCall(
      "splitSignature",
      "splitSignature(bytes):(bytes32,bytes32,uint8)",
      [ethereum.Value.fromBytes(sig)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GitHubFundManager__splitSignatureResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toI32(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _risc0Verifier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class DistributeFundCall extends ethereum.Call {
  get inputs(): DistributeFundCall__Inputs {
    return new DistributeFundCall__Inputs(this);
  }

  get outputs(): DistributeFundCall__Outputs {
    return new DistributeFundCall__Outputs(this);
  }
}

export class DistributeFundCall__Inputs {
  _call: DistributeFundCall;

  constructor(call: DistributeFundCall) {
    this._call = call;
  }

  get fundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get logins(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get shares(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get journal(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get postStateDigest(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get seal(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DistributeFundCall__Outputs {
  _call: DistributeFundCall;

  constructor(call: DistributeFundCall) {
    this._call = call;
  }
}

export class FundToRepoCall extends ethereum.Call {
  get inputs(): FundToRepoCall__Inputs {
    return new FundToRepoCall__Inputs(this);
  }

  get outputs(): FundToRepoCall__Outputs {
    return new FundToRepoCall__Outputs(this);
  }
}

export class FundToRepoCall__Inputs {
  _call: FundToRepoCall;

  constructor(call: FundToRepoCall) {
    this._call = call;
  }

  get orgAndName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FundToRepoCall__Outputs {
  _call: FundToRepoCall;

  constructor(call: FundToRepoCall) {
    this._call = call;
  }
}

export class HandleOracleFulfillmentCall extends ethereum.Call {
  get inputs(): HandleOracleFulfillmentCall__Inputs {
    return new HandleOracleFulfillmentCall__Inputs(this);
  }

  get outputs(): HandleOracleFulfillmentCall__Outputs {
    return new HandleOracleFulfillmentCall__Outputs(this);
  }
}

export class HandleOracleFulfillmentCall__Inputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get response(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get err(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class HandleOracleFulfillmentCall__Outputs {
  _call: HandleOracleFulfillmentCall;

  constructor(call: HandleOracleFulfillmentCall) {
    this._call = call;
  }
}

export class RegisterGitHubPassCall extends ethereum.Call {
  get inputs(): RegisterGitHubPassCall__Inputs {
    return new RegisterGitHubPassCall__Inputs(this);
  }

  get outputs(): RegisterGitHubPassCall__Outputs {
    return new RegisterGitHubPassCall__Outputs(this);
  }
}

export class RegisterGitHubPassCall__Inputs {
  _call: RegisterGitHubPassCall;

  constructor(call: RegisterGitHubPassCall) {
    this._call = call;
  }

  get gitHubLogin(): string {
    return this._call.inputValues[0].value.toString();
  }

  get taskId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get schemaId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get uHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get publicFieldsHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get allocator(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get allocatorSignature(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get validator(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get validatorSignature(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class RegisterGitHubPassCall__Outputs {
  _call: RegisterGitHubPassCall;

  constructor(call: RegisterGitHubPassCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFundCall extends ethereum.Call {
  get inputs(): WithdrawFundCall__Inputs {
    return new WithdrawFundCall__Inputs(this);
  }

  get outputs(): WithdrawFundCall__Outputs {
    return new WithdrawFundCall__Outputs(this);
  }
}

export class WithdrawFundCall__Inputs {
  _call: WithdrawFundCall;

  constructor(call: WithdrawFundCall) {
    this._call = call;
  }

  get fundId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get login(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class WithdrawFundCall__Outputs {
  _call: WithdrawFundCall;

  constructor(call: WithdrawFundCall) {
    this._call = call;
  }
}
